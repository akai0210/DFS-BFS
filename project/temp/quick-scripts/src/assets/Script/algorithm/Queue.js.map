{"version":3,"sources":["assets\\Script\\algorithm\\Queue.ts"],"names":[],"mappings":";;;;;;AAEA;IAAA;QAEU,gBAAW,GAAgB,SAAS,CAAC;QACrC,aAAQ,GAAgB,SAAS,CAAC;QAClC,WAAM,GAAW,CAAC,CAAC;IAkD7B,CAAC;IAhDQ,oBAAI,GAAX;QACI,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAEM,uBAAO,GAAd;QACI,OAAO,IAAI,CAAC,WAAW,KAAK,SAAS,CAAC;IAC1C,CAAC;IAEM,oBAAI,GAAX,UAAY,KAAY;QACpB,0CAA0C;QAC1C,IAAI,IAAI,GAAG,IAAI,IAAI,CAAQ,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAE5D,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE;YAC7B,uDAAuD;YACvD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC/B;QAED,iDAAiD;QACjD,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE;YAChC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;SAC3B;QAED,8BAA8B;QAC9B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAEM,mBAAG,GAAV;QACI,yCAAyC;QACzC,iDAAiD;QACjD,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;QAElC,8BAA8B;QAC9B,IAAI,UAAU,CAAC,IAAI,KAAK,SAAS,EAAG;YAChC,6EAA6E;YAC7E,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;SAC1C;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC;QAEnC,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,OAAO,UAAU,CAAC,IAAI,CAAC;IAC3B,CAAC;IAEM,oBAAI,GAAX;QACI,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IACjC,CAAC;IAEH,YAAC;AAAD,CAtDA,AAsDC,IAAA;;AAED;IAME,cAAa,IAAO,EAAE,QAAiB,EAAE,IAAa;QAClD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAEM,sBAAO,GAAd,UAAe,IAAa;QACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAEM,0BAAW,GAAlB,UAAmB,QAAiB;QAChC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAEH,WAAC;AAAD,CApBA,AAoBC,IAAA","file":"","sourceRoot":"/","sourcesContent":["import List from \"./List\";\r\n\r\nexport default class Queue<TData> implements List<TData>{\r\n\r\n  private _bottomNode: Node<TData> = undefined;\r\n  private _topNode: Node<TData> = undefined;\r\n  private _count: number = 0;\r\n\r\n  public size(): number {\r\n      return this._count;\r\n  }\r\n\r\n  public isEmpty(): boolean {\r\n      return this._bottomNode === undefined;\r\n  }\r\n\r\n  public push(value: TData): void {\r\n      // create a new Node and add it to the top\r\n      let node = new Node<TData>(value, this._topNode, undefined);\r\n\r\n      if (this._topNode !== undefined) {\r\n          // set the \"next\" property on the top node if it exists\r\n          this._topNode.setNext(node);\r\n      }\r\n\r\n      // if there is no bottom node, this is the bottom\r\n      if (this._bottomNode === undefined) {\r\n          this._bottomNode = node;\r\n      }\r\n\r\n      // this is always the top node\r\n      this._topNode = node;\r\n      this._count++;\r\n  }\r\n\r\n  public pop(): TData {\r\n      // remove the bottom node from the stack.\r\n      // the node at the bottom now is the one after it\r\n      let poppedNode = this._bottomNode;\r\n\r\n      // if this node has a next one\r\n      if (poppedNode.next !== undefined ) {\r\n          // as we are popping the node, the next node will no longer have a \"previous\"\r\n          poppedNode.next.setPrevious(undefined);\r\n      }\r\n\r\n      this._bottomNode = poppedNode.next;\r\n\r\n      this._count--;\r\n      return poppedNode.data;\r\n  }\r\n\r\n  public peek(): TData {\r\n      return this._bottomNode.data;\r\n  }\r\n\r\n}\r\n\r\nclass Node<T> {\r\n\r\n  previous: Node<T>;\r\n  next: Node<T>;\r\n  data: T;\r\n\r\n  constructor (data: T, previous: Node<T>, next: Node<T>) {\r\n      this.previous = previous;\r\n      this.next = next;\r\n      this.data = data;\r\n  }\r\n\r\n  public setNext(next: Node<T>): void {\r\n      this.next = next;\r\n  }\r\n\r\n  public setPrevious(previous: Node<T>): void {\r\n      this.previous = previous;\r\n  }\r\n\r\n}"]}