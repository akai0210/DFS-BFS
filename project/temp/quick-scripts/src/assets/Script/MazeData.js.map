{"version":3,"sources":["assets\\Script\\MazeData.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Tile from \"./Tile\";\r\n\r\nenum TILE_TYPE {\r\n  ROAD,\r\n  WALL,\r\n  PATH,\r\n  // MIST, // 迷雾\r\n};\r\n\r\nclass MazeData {\r\n\r\n  public static  TILESIZE:number = 20;\r\n\r\n  private n:number;\r\n  private m:number;\r\n  public maze:Tile[][] = [];\r\n  \r\n  public visited:boolean[][] = [];\r\n  public process:Tile[]; // 查找过程\r\n  public inMist:boolean[][] = [];\r\n  public path:Tile[] = [];\r\n\r\n  private entranceX:number\r\n  private entranceY:number;\r\n  private exitX:number;\r\n  private exitY:number;  \r\n\r\n  public constructor(N:number, M:number){\r\n   \r\n    if( N%2 === 0 && M%2 === 0)\r\n      throw new Error(\"Our Maze Generalization Algorihtm requires the width and height of the maze are odd numbers\")\r\n\r\n    this.n = N;\r\n    this.m = M;\r\n\r\n    this.entranceX = 1;\r\n    this.entranceY = 0;\r\n    this.exitX = this.n - 2;\r\n    this.exitY = this.m - 1;\r\n\r\n    this.process = [];\r\n    this.path = [];\r\n    for(let i = 0 ; i < N ; i ++) {\r\n      this.maze[i] = [];\r\n      this.visited[i] = [];\r\n      this.inMist[i]= [];\r\n      for(let j = 0 ; j < N ; j ++) {\r\n        if(i%2 === 1 && j%2 === 1)\r\n          this.maze[i][j] = new Tile(i, j, TILE_TYPE.ROAD, true);\r\n        else\r\n          this.maze[i][j] = new Tile(i, j, TILE_TYPE.WALL, true);\r\n\r\n        this.visited[i][j] = false;\r\n        this.inMist[i][j] = true;\r\n      }\r\n    }\r\n\r\n    this.maze[this.entranceX][this.entranceY] = new Tile(this.entranceX, this.entranceY, TILE_TYPE.ROAD);\r\n    this.maze[this.exitX][this.exitY] = new Tile(this.exitX, this.exitY, TILE_TYPE.ROAD);\r\n  }\r\n\r\n  public N(){return this.n;}\r\n  public M(){return this.m;}\r\n  public getEentranceX(){return this.entranceX;}\r\n  public getEentranceY(){return this.entranceY;}\r\n  public getExitX(){return this.exitX;}\r\n  public getExitY(){return this.exitY;}\r\n  public getMaze(i:number, j:number){\r\n    if(!this.inArea(i, j))\r\n      throw new Error(\"i or j is out of index in getMaze!\");\r\n\r\n    return this.maze[i][j];\r\n  }\r\n\r\n  public  inArea( x:number,  y:number):boolean{\r\n    return x >= 0 && x < this.n && y >= 0 && y < this.m;\r\n  }\r\n  public openMist(x:number, y:number){\r\n    if(!this.inArea(x, y))\r\n      throw new Error(\"i or j is out of index in getMaze!\");\r\n\r\n    for(let i = x-1 ; i <= x+1; i ++){\r\n      for(let j = y-1 ; j <= y+1; j ++){\r\n        if(this.inArea(i, j)){\r\n          let tile = this.maze[i][j];\r\n          tile.setIsMist(false);\r\n\r\n          this.process.push(new Tile(i, j, tile.getType(), false)); \r\n        }\r\n          \r\n      }\r\n    } \r\n  }\r\n}\r\n\r\nexport { MazeData };\r\nexport { TILE_TYPE};"]}