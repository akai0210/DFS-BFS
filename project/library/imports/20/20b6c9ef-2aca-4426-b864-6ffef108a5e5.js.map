{"version":3,"sources":["assets\\Script\\STGame.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import {Singleton} from \"./Singleton\"\r\nimport { STMazeHelper } from \"./STMazeHelper\";\r\nimport { MazeData, TILE_TYPE } from \"./MazeData\";\r\nimport Tile from \"./Tile\";\r\nimport Stack from \"./algorithm/Stack\";\r\nimport Queue from \"./algorithm/Queue\";\r\nimport RandomQueue from \"./algorithm/RandomQueue\";\r\nimport RandomQueue2 from \"./algorithm/RandomQueue2\";\r\nimport List from \"./algorithm/List\";\r\nimport { VisualizationType } from \"./Maze\";\r\n\r\nclass STGame extends Singleton{\r\n  private _tileNodes:cc.Node [][] = [];\r\n  private _mazeData:MazeData = null;\r\n  private _graphicsNode: cc.Node;\r\n\r\n  private d:number [][] = [[-1,0], [0,1], [1,0], [0,-1]]; // 四个方向偏移量\r\n\r\n  public loadData(size:number, tilesize:number){\r\n    let N:number = size; \r\n    let M:number = size;\r\n    if(tilesize != null){\r\n      MazeData.TILESIZE = tilesize;\r\n    }\r\n    this._mazeData = new MazeData(N, M);\r\n  }\r\n\r\n  public setTileSpriteFrame(sp:cc.SpriteFrame){\r\n    STMazeHelper.getInstance().setTileSpriteFrame(sp);\r\n  }\r\n\r\n  public initGraphicsNode(node:cc.Node){\r\n    this._graphicsNode = node; \r\n\r\n    this._graphicsNode.setContentSize(MazeData.TILESIZE * this._mazeData.N(), MazeData.TILESIZE * this._mazeData.M());\r\n\r\n    this._graphicsNode.x = -MazeData.TILESIZE * this._mazeData.N() / 2;\r\n    this._graphicsNode.y = MazeData.TILESIZE * this._mazeData.M() / 2;\r\n  }\r\n\r\n  public initMap(){\r\n    let line = this._mazeData.N();\r\n    let row = this._mazeData.M();\r\n\r\n    // 绘制地图\r\n    for (let i = 0; i < line; i++) {\r\n      this._tileNodes[i] = [];\r\n      for (let j = 0; j < row; j++) {\r\n        let tile = this._mazeData.getMaze(i, j);\r\n\r\n        let node = STMazeHelper.getInstance().createTile(this._graphicsNode, tile);\r\n        this._tileNodes[i][j] = node;\r\n      }        \r\n    } \r\n  }\r\n\r\n  public run(type:number){\r\n    if(type === VisualizationType.递归DFS深度优先寻路过程演示){\r\n      this.dfsRecursion();\r\n      this.findPath();\r\n    }\r\n    else if(type === VisualizationType.非递归DFS深度优先寻路过程演示){\r\n      this.dfsNonRecursion();\r\n      this.findPath();\r\n    }\r\n    else if(type === VisualizationType.非递归DFS寻路过程演示){\r\n      let algo = new Stack<Tile>();\r\n      this.algoNonRecursion(algo); \r\n      this.findPath();\r\n    }\r\n    else if(type === VisualizationType.非递归BFS寻路过程演示){\r\n      let algo = new Queue<Tile>();\r\n      this.algoNonRecursion(algo); \r\n      this.findPath();\r\n    }\r\n    else if(type === VisualizationType.非递归BSF基础上随机地图Version1寻路过程演示){\r\n      let algo = new RandomQueue<Tile>();\r\n      this.algoNonRecursion(algo); \r\n      this.findPath();\r\n    }\r\n    else if(type === VisualizationType.非递归BSF基础上随机地图Version2寻路过程演示){\r\n      let algo = new RandomQueue2<Tile>();\r\n      this.algoNonRecursion(algo); \r\n      this.findPath();\r\n    }\r\n    else if(type === VisualizationType.非递归DFS地图生成过程演示){\r\n      let algo = new Stack<Tile>();\r\n      this.algoNonRecursion(algo); \r\n      STMazeHelper.getInstance().playProcess(this._tileNodes, this._mazeData.process, true);\r\n    }\r\n    else if(type === VisualizationType.非递归BFS地图生成过程演示){\r\n      let algo = new Queue<Tile>();\r\n      this.algoNonRecursion(algo); \r\n      STMazeHelper.getInstance().playProcess(this._tileNodes, this._mazeData.process, true)\r\n    }\r\n    else if(type === VisualizationType.非递归BSF基础上随机地图Version1生成过程演示){\r\n      let algo = new RandomQueue<Tile>();\r\n      this.algoNonRecursion(algo); \r\n      STMazeHelper.getInstance().playProcess(this._tileNodes, this._mazeData.process, true)\r\n    }\r\n    else if(type === VisualizationType.非递归BSF基础上随机地图Version2生成过程演示){\r\n      let algo = new RandomQueue2<Tile>();\r\n      this.algoNonRecursion(algo); \r\n      STMazeHelper.getInstance().playProcess(this._tileNodes, this._mazeData.process, true)\r\n    }\r\n\r\n    // this.dfsRecursion();\r\n    // this.dfsNonRecursion();\r\n    // let algo = new RandomQueue2<Tile>();\r\n    // this.algoNonRecursion(algo);\r\n    // STMazeHelper.getInstance().playProcess(this._tileNodes, this._mazeData.process, false);\r\n    // STMazeHelper.getInstance().playProcess(this._tileNodes, this._mazeData.process, true);\r\n\r\n    // this.findPath();\r\n  }\r\n  private dfsFindPath(x:number, y:number):boolean{\r\n\r\n    this._mazeData.visited[x][y] = true;\r\n    this._mazeData.path.push(new Tile(x, y, TILE_TYPE.PATH, false)); \r\n\r\n    if(x === this._mazeData.getExitX() && y === this._mazeData.getExitY()){\r\n      return true;\r\n    }\r\n\r\n    for(let i = 0 ; i < 4; i ++){\r\n      let newX = x + this.d[i][0];\r\n      let newY = y + this.d[i][1];\r\n     \r\n      if( this._mazeData.inArea(newX, newY) && \r\n                    this._mazeData.maze[newX][newY].getType() == TILE_TYPE.ROAD &&\r\n                    !this._mazeData.visited[newX][newY])\r\n        if(this.dfsFindPath(newX, newY)) return true;\r\n    }\r\n\r\n    let type = this._mazeData.maze[x][y].getType()\r\n    this._mazeData.path.push(new Tile(x, y, type, false)); \r\n    return false;\r\n  }\r\n  private findPath(){\r\n    for(let i = 0 ; i < this._mazeData.N(); i ++){\r\n      for(let j = 0 ; j < this._mazeData.M(); j ++){\r\n        this._mazeData.visited[i][j] = false;\r\n      }\r\n    }\r\n    this.dfsFindPath(this._mazeData.getEentranceY(), this._mazeData.getEentranceY());\r\n    STMazeHelper.getInstance().playProcess(this._tileNodes, this._mazeData.path ,true);\r\n  }\r\n  private algoNonRecursion(algo:List<Tile>){\r\n    let queue:List<Tile> = algo;\r\n\r\n    let first = new Tile(this._mazeData.getEentranceX(), this._mazeData.getEentranceY() + 1,TILE_TYPE.ROAD, false);\r\n    queue.push(first);\r\n    this._mazeData.visited[first.getX()][first.getY()] = true;\r\n    this._mazeData.openMist(first.getX(), first.getY());\r\n\r\n    while(!queue.isEmpty()){\r\n      let curPos = queue.pop();\r\n\r\n      let x = curPos.getX();\r\n      let y = curPos.getY();\r\n      for(let i = 0 ; i < 4; i ++){\r\n        let newX = x + this.d[i][0]*2;\r\n        let newY = y + this.d[i][1]*2;\r\n  \r\n        if(this._mazeData.inArea(newX, newY) && !this._mazeData.visited[newX][newY]){\r\n          queue.push(new Tile(newX , newY, TILE_TYPE.ROAD, false))\r\n          this._mazeData.visited[newX][newY] = true;\r\n          this._mazeData.openMist(newX, newY);\r\n          this.setData(curPos.getX() + this.d[i][0] , curPos.getY() + this.d[i][1]);\r\n        }\r\n      } \r\n    }\r\n  }\r\n  private dfsNonRecursion(){\r\n    let stack:Stack<Tile> = new Stack<Tile>();\r\n\r\n    let first = new Tile(this._mazeData.getEentranceX(), this._mazeData.getEentranceY() + 1,TILE_TYPE.ROAD);\r\n    stack.push(first);\r\n    this._mazeData.visited[first.getX()][first.getY()] = true;\r\n\r\n    while(!stack.isEmpty()){\r\n      let curPos = stack.pop();\r\n\r\n      let x = curPos.getX();\r\n      let y = curPos.getY();\r\n      for(let i = 0 ; i < 4; i ++){\r\n        let newX = x + this.d[i][0]*2;\r\n        let newY = y + this.d[i][1]*2;\r\n  \r\n        if(this._mazeData.inArea(newX, newY) && !this._mazeData.visited[newX][newY]){\r\n          stack.push(new Tile(newX , newY, TILE_TYPE.ROAD))\r\n          this._mazeData.visited[newX][newY] = true;\r\n          this.setData(curPos.getX() + this.d[i][0] , curPos.getY() + this.d[i][1]);\r\n        }\r\n      } \r\n\r\n    }\r\n  }\r\n  private dfsRecursion(){\r\n    this.go(this._mazeData.getEentranceX(), this._mazeData.getEentranceY() + 1);\r\n  }\r\n  private go(x:number, y:number):void{\r\n    if(!this._mazeData.inArea(x, y))\r\n      throw new Error(\"x,y are out of index in go function!\");\r\n\r\n    this._mazeData.visited[x][y] = true;\r\n\r\n    for(let i = 0 ; i < 4; i ++){\r\n      let newX = x + this.d[i][0]*2;\r\n      let newY = y + this.d[i][1]*2;\r\n\r\n      if(this._mazeData.inArea(newX, newY) && !this._mazeData.visited[newX][newY]){\r\n        this.setData(x + this.d[i][0], y + this.d[i][1]);\r\n        this.go(newX, newY);\r\n      }\r\n    }\r\n  }\r\n\r\n  private setData(x:number, y:number){\r\n    if(this._mazeData.inArea(x, y)){\r\n      let tile = this._mazeData.maze[x][y];\r\n      tile.setType(TILE_TYPE.ROAD);\r\n      this._mazeData.process.push(new Tile(x, y, TILE_TYPE.ROAD, false));\r\n    }\r\n  }\r\n} \r\n\r\nexport { STGame };\r\n"]}